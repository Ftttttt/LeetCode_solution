题目：
  判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

  示例 1:
  输入: 121
  输出: true
  
  示例 2:
  输入: -121
  输出: false
  解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
  
  示例 3:
  输入: 10
  输出: false
  解释: 从右向左读, 为 01 。因此它不是一个回文数。
  
  进阶:
  你能不将整数转为字符串来解决这个问题吗？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/palindrome-number
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

法一（转化字符串）：
```
class Solution:
    def isPalindrome(self, x: int) -> bool:
        str_x = str(x)
        str_1 = str_x[::-1]
        return True if str_x == str_1 else False
```

法二（整数取模取余）：
```
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x == 0:  //零是回文数
            return True 
        if x < 0 or (x//10)*10 == x: //负数和末尾为零的数字不可能是回文数
            return False
        rev = 0
        while rev < x:
            rev = rev*10 + x % 10
            x //= 10
        return (rev == x) or (rev//10 == x) //如果x是偶数，rev==x可得True，x是奇数，则rev//10==x可得True
```
注：
  这个解法的操作就是“取出后半段数字进行翻转”。
  这里需要注意的一个点就是由于回文数的位数可奇可偶，所以当它的长度是偶数时，它对折过来应该是相等的；当它的长度是奇数时，那么它对折过来后，有一个的长度需要去掉一位数（除以 10 并取整）。
